#!/usr/bin/env python
import os
import sys
import time
import argparse
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_whisper_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Whisper API"""
    try:
        import openai
        
        openai.api_key = os.getenv("OPENAI_API_KEY")
        if not openai.api_key:
            print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Whisper API...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt="–ü—Ä–∏–≤–µ—Ç",
            max_tokens=5
        )
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ OpenAI API: {str(e)}")
        return False

def test_anthropic_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anthropic API"""
    try:
        import anthropic
        
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Anthropic API...")
        
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        response = client.messages.create(
            model="claude-3-opus-20240229",
            max_tokens=10,
            messages=[
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}
            ]
        )
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Anthropic API")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Anthropic API: {str(e)}")
        return False

def test_audio_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é FFmpeg –∏ pydub"""
    try:
        from pydub import AudioSegment
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ...")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
        sample_rate = 44100  # 44.1kHz
        sample_size = 2      # 16-bit (2 bytes)
        channels = 2         # Stereo
        
        # –°–æ–∑–¥–∞–µ–º 500ms —Ç–∏—à–∏–Ω—ã
        silent_segment = AudioSegment.silent(duration=500, frame_rate=sample_rate)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
        if (silent_segment.frame_rate == sample_rate and 
            silent_segment.sample_width == sample_size and 
            silent_segment.channels == channels):
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ—Å–µ–≥–º–µ–Ω—Ç–∞")
            
            # –ü—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            test_file = "test_audio.mp3"
            silent_segment.export(test_file, format="mp3")
            
            if os.path.exists(test_file):
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ({test_file})")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                os.remove(test_file)
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª")
                return False
        else:
            print("‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Å–µ–≥–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {str(e)}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        import requests
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        print("‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        base_url = "http://localhost:8000/api"
        
        endpoints = [
            "/calls",
        ]
        
        all_ok = True
        
        for endpoint in endpoints:
            try:
                response = requests.get(f"{base_url}{endpoint}")
                if response.status_code == 200:
                    print(f"‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                    all_ok = False
            except requests.RequestException:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É {endpoint}")
                all_ok = False
        
        return all_ok
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {str(e)}")
        return False

def main():
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤")
    parser.add_argument("--all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--whisper", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Whisper API")
    parser.add_argument("--anthropic", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Anthropic API")
    parser.add_argument("--audio", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ")
    parser.add_argument("--api", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)")
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
    if not (args.whisper or args.anthropic or args.audio or args.api):
        args.all = True
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–≤–æ–Ω–∫–æ–≤")
    print("=" * 50)
    
    results = {}
    
    if args.all or args.whisper:
        print("\nüìã –¢–µ—Å—Ç #1: Whisper API")
        results["whisper"] = test_whisper_api()
        print()
    
    if args.all or args.anthropic:
        print("\nüìã –¢–µ—Å—Ç #2: Anthropic API")
        results["anthropic"] = test_anthropic_api()
        print()
    
    if args.all or args.audio:
        print("\nüìã –¢–µ—Å—Ç #3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ")
        results["audio"] = test_audio_processing()
        print()
    
    if args.all or args.api:
        print("\nüìã –¢–µ—Å—Ç #4: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã")
        results["api"] = test_api_endpoints()
        print()
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 50)
    
    all_passed = True
    for test, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test.upper()}: {status}")
        if not result:
            all_passed = False
    
    if all_passed:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

if __name__ == "__main__":
    main()